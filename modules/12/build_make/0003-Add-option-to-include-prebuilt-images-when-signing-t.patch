From 203d99fcfe8ec55a04c12fdb070c893cfa604022 Mon Sep 17 00:00:00 2001
From: Zhaofeng Li <hello@zhaofeng.li>
Date: Wed, 23 Mar 2022 19:16:53 -0700
Subject: [PATCH] Add option to include prebuilt images when signing target
 files.

Adapted from original CL from Greg Ross <greg@toolstack.com>:
https://review.lineageos.org/c/LineageOS/android_build/+/277134

When producing a signed build using sign_target_files_apks.py and a prebuilt
vendor.img (or other prebuilt images that are to be included in the final zip)
sign_target_files_apks.py must be told to include the prebuilt images or they
will not be included in the final file.

The build process uses the make configuration statements
BOARD_PREBUILT_VENDORIMAGE and AB_OTA_PARTITIONS to inform the build process
to add the image files, however since sign_target_files_apks.py is not part
of the make system, it does not know about these configuration settings.

This patch therefore adds a new command line option to the
sign_target_files_apks.py script to allow the user to add one or more images
to the signed-target_files.zip that is produced.

The command line option has the following format:

  --prebuilt_image <path to prebuilt image>
      Specify a path to a prebuilt image file, to be added to the
      signed_target-files.zip. This option may be repeated to add multiple
      images.

Change-Id: Id906b2e32797f95b0ee47859036ba31ea7975b64
---
 tools/releasetools/sign_target_files_apks.py | 30 ++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/tools/releasetools/sign_target_files_apks.py b/tools/releasetools/sign_target_files_apks.py
index 936ef888dc..a78b178cb7 100755
--- a/tools/releasetools/sign_target_files_apks.py
+++ b/tools/releasetools/sign_target_files_apks.py
@@ -141,6 +141,11 @@ Usage:  sign_target_files_apks [flags] input_target_files output_target_files
       Allow the existence of the file 'userdebug_plat_sepolicy.cil' under
       (/system/system_ext|/system_ext)/etc/selinux.
       If not set, error out when the file exists.
+
+  --prebuilt_image <path to prebuilt image>
+      Specify a path to a prebuilt image file, to be added to the
+      signed_target-files.zip. This option may be repeated to add multiple
+      images.
 """
 
 from __future__ import print_function
@@ -178,6 +183,7 @@ OPTIONS = common.OPTIONS
 
 OPTIONS.extra_apks = {}
 OPTIONS.extra_apex_payload_keys = {}
+OPTIONS.prebuilt_images = []
 OPTIONS.skip_apks_with_path_prefix = set()
 OPTIONS.key_map = {}
 OPTIONS.rebuild_recovery = False
@@ -1206,6 +1212,8 @@ def main(argv):
       names = names.split(",")
       for n in names:
         OPTIONS.extra_apks[n] = key
+    elif o == "--prebuilt_image":
+      OPTIONS.prebuilt_images.append(a)
     elif o == "--extra_apex_payload_key":
       apex_name, key = a.split("=")
       OPTIONS.extra_apex_payload_keys[apex_name] = key
@@ -1358,6 +1366,7 @@ def main(argv):
           "gki_signing_algorithm=",
           "gki_signing_extra_args=",
           "allow_gsi_debug_sepolicy",
+          "prebuilt_image=",
       ],
       extra_option_handler=option_handler)
 
@@ -1400,6 +1409,23 @@ def main(argv):
                      platform_api_level, codename_to_api_level_map,
                      compressed_extension)
 
+  if OPTIONS.prebuilt_images:
+    # Ugly Nix-specific HACK: The source file may be read-only
+    # ZipWrite really, really wants to chmod the file :(
+    # Delete all lines containing HACK
+    tempdir = tempfile.mkdtemp() # HACK
+
+    for prebuilt_image in OPTIONS.prebuilt_images:
+      image_name = os.path.basename(prebuilt_image)
+
+      temp = os.path.join(tempdir, image_name) # HACK
+      shutil.copy(prebuilt_image, temp) # HACK
+      prebuilt_image = temp # HACK
+
+      common.ZipWrite(output_zip, prebuilt_image, os.path.join("IMAGES/", image_name))
+
+    shutil.rmtree(tempdir) # HACK
+
   common.ZipClose(input_zip)
   common.ZipClose(output_zip)
 
@@ -1409,6 +1435,10 @@ def main(argv):
   # recovery patch is guaranteed to be regenerated there.
   if OPTIONS.rebuild_recovery:
     new_args.append("--rebuild_recovery")
+
+  if OPTIONS.prebuilt_images:
+    new_args.append("--add_missing")
+
   new_args.append(args[1])
   add_img_to_target_files.main(new_args)
 
-- 
2.35.1

